@charset "utf-8";
@import "type-check";
@import "list";
@import "map";
@import "debug";

@mixin container{
  width:100%;
  height:0;
  margin:0 auto;
}

$layout-relative-base-list: (
        width,height,font-size
);
$layout-related-to-width-list: (
        width,min-width,max-width,left,right,
        margin,margin-top,margin-right,margin-bottom,margin-left,
        padding,padding-top,padding-right,padding-bottom,padding-left
);
$layout-related-to-height-list: (
        height,max-height,min-height,top,bottom
);
$layout-related-to-font-list:(
        line-height,word-spacing,letter-spacing,
        max-width,min-width,max-height,min-height,
        border-top-width,border-right-width,border-left-width,border-bottom-width,border-width,
        border-top-left-radius,border-top-right-radius,border-bottom-left-radius,border-bottom-left-radius,
        border-radius
);

$layout-name-component-maps:(
  //layout box type
        w:width,wd:width,width:width,
        h:height,hg:height,height:height,
        m:margin,mr:margin,mar:margin,mgn:margin,margin:margin,
        p:padding,pd:padding,pad:padding,pdn:padding,padding:padding,
        bd:border,bo:border,brd:border,bord:border,border:border,
        ra:radius,rd:radius,radius:radius,

  //layout text type
        wr:word,wor:word,word:word,
        le:letter,let:letter,letter:letter,
        f:font,ft:font,font:font,
        ln:line,line:line,
        s:size,sz:size,size:size,
        sp:spacing,space:spacing,spacing:spacing,
        c:count,co:count,coun:count,count:count,

  //layout direction
        t:top,tp:top,top:top,
        b:bottom,bt:bottom,bot:bottom,btm:bottom,bottom:bottom,
        l:left,lt:left,lft:left,left:left,
        r:right,rt:right,rgt:right,right:right
);

@function parseKeyName($key){
  $result:'';
  @while str-index($key,'-'){
    $separator-index:str-index($key,'-');
    $temp:selectKey($layout-name-component-maps,str-slice($key,1,$separator-index+-1));
    @if $temp{
      $result:$result+'-'+$temp;
    }
    $key:str-slice($key,$separator-index+1);
  }
  $result:$result+'-'+selectKey($layout-name-component-maps,$key,'');
  @return unquote(str-slice($result,2));
}

@function parseMap($map){
  $result:();
  @if isMap($map){
    @each $key,$value in $map{
      $key:parseKeyName($key);
      @if $key!=''{
        $result:map-merge($result,(#{$key}:$value));
      }
    }
  }
  @return $result;
}


//calculate the amount of #{$raw} relative to #{$base} followed with the given #{$unit}
//@param
//  $raw: a number or a list inclusive of numbers
//  $base: a number $raw relates to
//  $unit: a number valued as 100%, 1em, 1px... and 100% as default
//  $is-tolerant: a boolean that for true the invalid items of $raw, each of which is not a number nor comparable with $base(has
//    same unit with $base), would reverse in the result, and for otherwise the invalid items would be rejected.
//@return
//  a relative amount or a list inclusive of relative amount.
@function relative($raw, $base, $unit:100%, $is-tolerant:false){
  $result:();
  @if isMap($base){
    $base:parseMap($base);
    //parseMap would return an empty map:() in some case.However,type-of(())==list,thus we should check it again.
    @if isMap($base){
      $base:if($unit==1em,map-get($base,font-size),
              if($unit==100%,map-get($base,width),null));
    }
  }
  @if isNumber($base, $unit){
    @if isNumber($raw) and comparable($raw, $base){
      $result: if($raw!=0,$raw/$base*$unit,0);
    }
    @else if isList($raw){
      @each $r in $raw{
        @if isNumber($r) and comparable($r, $base){
          $result: append($result, if($r!=0,$r/$base*$unit,0));
        }
        @else if $is-tolerant{
          $result:append($result,$r);
        }
      }
    }
  }
  @return if(isEmptyList($result),null,$result);
}

//a same function as #{@function relative} with abbreviated name.
@function rel($raw, $base, $unit:100%){
  @return relative($raw, $base, $unit);
}

//calculate the relative layout
//@param
//  $abs-child: a map with keys which stands for some properties of l
@mixin relLayout($abs-child,$abs-parent){
  @if & and isMap($abs-child,$abs-parent){
    //set relative layout property.
    //all these relative layout property is percentage of absolute property to width of parent element
    $parent-width:null;
    @each $key,$value in $abs-parent{
      @if parseKeyName($key)==width and hasUnit($value){
        $parent-width:$value;
      }
    }
    @if $parent-width{
      @each $key,$value in $abs-child{
        $key:parseKeyName($key);
        //test if the key 
        @if hasItem($layout-related-to-width-list,$key){
          $value:rel($value,$parent-width);
          @if $value{
            #{$key}:$value;
          }
        }
      }
//      @each $prop in $layout-related-to-width-list{
//        @if hasKeyWithUnit($abs-child,parseKeyName($prop)){
//          #{$prop}:rel(map-get($abs-child,$prop),$parent-width);
//        }
//      }
    }
  }
}

@mixin relBox($abs-child,$abs-parent){
  @if & and isMap($abs-child,$abs-parent){
    //set relative layout property.
    //all these relative layout property is percentage of absolute property to width of parent element
    @include relLayout($abs-child,$abs-parent);
    //set relative height
    @if hasKeyWithUnit($abs-parent,height) and hasKeyWithUnit($abs-child,height){
      height:rel(map-get($abs-child,height),map-get($abs-parent,height));
    }
  }
}

@mixin relContentBox($abs-child,$abs-parent){
  @if & and isMap($abs-child,$abs-parent){
    //set relative layout property.
    //all these relative layout property is percentage of absolute property to width of parent element
    @include relLayout($abs-child,$abs-parent);
    //set line-height;
    @if hasKeyWithUnitForAll(($abs-child,$abs-parent),font-size){
      $font-size:map-get($abs-child,font-size);
      $line-padding: selectKeyWithUnit($abs-child,line-padding,0px);
      $line-height: selectKeyWithUnit($abs-child,line-height,$font-size+$line-padding);
      font-size:rel($font-size,map-get($abs-parent,font-size),1em);
      line-height:rel($line-height,$font-size,1em);
      @if hasKeyWithUnit($abs-child,line-count,""){
        max-height:rel(map-get($abs-child,line-count)*$line-height,$font-size,1em);
        height:auto!important;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      //set border(like 0.5em solid #ffffff) related to font-size ;
      $border:selectKey($abs-child,border);
      @if isList($border){
        $_border:();
        @each $element in $border{
          @if hasUnit($element){
            $element:rel($element,$font-size,1em);
          }
          $_border:append($_border,$element);
        }
        border:$_border;
      }

      //set word-spacing, letter-spacing, border-width, border-radius related to font-size;
      $content-size:word-spacing,letter-spacing,
        border-top-width,border-right-width,border-left-width,border-bottom-width,border-width,
        border-top-left-radius,border-top-right-radius,border-bottom-left-radius,border-bottom-left-radius,
        border-radius;
      @each $size in $content-size{
        @if hasKeyWithUnit($abs-child,$size){
          #{$size}: rel(map-get($abs-child,$size),$font-size,1em);
        }
      }
      //set min-width;
      @if hasKey($abs-child,letter-count){
        $letter-count:map-get($abs-child,letter-count);
        @if hasUnit($letter-count,''){
          min-width: $letter-count * 1em;
        }
        @else if isList($letter-count){
          $count-1:selectItemWithUnit($letter-count,1,null,'');
          $count-2:selectItemWithUnit($letter-count,2,null,'');
          @if $count-1{
            min-width: $count-1 * 1em;
          }
          @if $count-2{
            max-width: $count-2 * 1em;
          }
        }
      }
      //adjust vertical margin or padding since presence of line-padding
      @if $line-padding>0 and hasKeyWithUnit($abs-parent,width){
        $parent-width:map-get($abs-parent,width);
        $mg-pd-top: selectKeyMapWithUnit($abs-child,(margin-top,padding-top),0px);
        $mg-pd-bottom: selectKeyMapWithUnit($abs-child,(margin-bottom,padding-bottom),0px);
        @each $key,$value in $mg-pd-top{
          #{$key}:rel($value+-($line-padding/2),$parent-width);
        }
        @each $key,$value in $mg-pd-bottom{
          #{$key}:rel($value+-($line-padding/2),$parent-width);
        }
      }
    }
  }
}

@mixin shapeBox($abs-child,$abs-parent){
  @if & and isMap($abs-child){
    $parent-width:if(hasKeyWithUnit($abs-parent,width),map-get($abs-parent,width),if(hasUnit($abs-parent),$abs-parent,null));
    @if $parent-width{
      @if hasKeyWithUnit($abs-child,width){
        width:rel(map-get($abs-child,width),$parent-width);
      }
      $height: selectKeyWithUnit($abs-child,(height,padding-bottom));
      @if $height{
        height:0;
        padding-bottom:rel($height,$parent-width);
      }
    }
  }
}

