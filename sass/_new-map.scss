//Map Operation

@import 'type-check';
@import 'type-conversion';

@function map-test($map,$key-list,$filter:map-has-key,$greed:false,$args...){
  @if not isMap($map){
    @error 'Wrong type of $map:#{$map}. Parameter of map type required.';
  }
  @if not function_exists($filter){
    @error 'function #{$filter} does not exist.';
  }
  @if not isBoollean($greed){
    @warn 'Dreprecated type of $greed:#{$greed}. Parameter of boolean type recommended.';
    $greed:toBoolean($greed);
  }
  @if isMap($key-list){
    @warn 'Dreprecated type of $key-list:#{$key-list}. Parameter of list or string type recommended.';
    $key-list:map-keys($key-list);
  }
  $key-list:if($key-list==(),map-keys($map),$key-list);
//  @if $key-list==(){
//    @error 'Empty list type of $key-list:#{$key-list} rejected';
//  }
  $keys:if(isList($key-list),$key-list,($key-list));
  $result:$greed;
  @each $key in $keys{
    @if $greed{
      @if not toBoolean(call($filter,$map,$key,$args...)){
        @return false;
      }
    }
    @else{
      @if map-has-key($map,$key) and toBoolean(call($filter,$map,$key,$args...)){
        @return true;
      }
    }
  }
  @return $result;
}

@function map-match($map,$key-list,$default:null,$filter:map-has-key,$process:map-get,$greed:false,$args...){
  @if not isMap($map){
    @error 'Wrong type of $map:#{$map}. Parameter of map type required.';
  }
  @if not function_exists($filter){
    @error 'function #{$filter} does not exist.';
  }
  @if not function_exists($process){
    @error 'function #{$process} does not exist.';
  }
  @if not isBoollean($greed){
    @warn 'Dreprecated type of $greed:#{$greed}. Parameter of boolean type required.';
    $greed:toBoolean($greed);
  }
  @if isMap($key-list){
    @warn 'Dreprecated type of $key-list:#{$key-list}. Parameter of list or string type recommended.';
    $key-list:map-keys($key-list);
  }
  $key-list:if($key-list==(),map-keys($map),$key-list);
//  @if $key-list==(){
//    @error 'Empty list type of $key-list:#{$key-list} rejected';
//  }
  $keys:if(isList($key-list),$key-list,($key-list));
  $result:();
  @each $key in $keys{
    @if map-has-key($map,$key) and toBoolean(call($filter,$map,$key,$args...)){
      $result-item:call($process,$map,$key);
      @if $greed{
        @if not variable_exists($result-item-type){
          $result-item-type:isMap($result-item);
        }
        @if $result-item-type{
          $result:map-merge($result,$result-item);
        }
        @else{
          $result:append($result,$result-item);
        }
      }
      @else{
        @return $result-item;
      }
    }
  }
  //check whether nothing matches.
  @return if(isMap($result),$result,$default);
}

//
@function _map-numeric($map,$key){
  @return isNumber(map-get($map,$key));
}
@function _map-has-unit($map,$key,$unit:px){
  @return hasUnit($map,$key,$unit);
}
@function _map-get-pair($map,$key){
  @return (#{$key}:map-get($map,$key));
}

///
@function map-has-numeric-key($map,$key-list,$greed:false){
  @return map-test($map,$key-list,_map-numeric,$greed);
}
@function map-has-key-with-unit($map,$key-list,$unit:px,$greed:false){
  @return map-test($map,$key-list,_map-has-unit,$greed,$unit);
}

///
@function map-select-key($map,$key-list,$default:null){
  @return map-match($map,$key-list,$default);
}
@function map-select-key-with-unit($map,$key-list,$unit:px,$default:null){
  @return map-match($map,$key-list,$default,_map-has-unit,map-get,false,$unit);
}
@function map-select-pari($map,$key-list,$default:null){
  @return map-match($map,$key-list,$default,map-has-key,_map-get-pair,false);
}
@function map-select-pair-with-unit($map,$key-list,$unit:px,$default:null){
  @return map-match($map,$key-list,$default,_map-has-unit,_map-get-pair,false);
}
